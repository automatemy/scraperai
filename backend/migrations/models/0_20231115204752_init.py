from tortoise import BaseDBAsyncClient


async def upgrade(db: BaseDBAsyncClient) -> str:
    return """
        CREATE TABLE IF NOT EXISTS "user" (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    "username" VARCHAR(50) NOT NULL UNIQUE,
    "password" VARCHAR(200) NOT NULL,
    "email" VARCHAR(255),
    "full_name" VARCHAR(255),
    "verification_code" VARCHAR(64),
    "updated_at" TIMESTAMP NOT NULL,
    "created_at" TIMESTAMP NOT NULL  DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE IF NOT EXISTS "token" (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    "access_token" VARCHAR(255) NOT NULL UNIQUE,
    "created_at" TIMESTAMP NOT NULL  DEFAULT CURRENT_TIMESTAMP,
    "expires" TIMESTAMP NOT NULL,
    "user_id" INT NOT NULL REFERENCES "user" ("id") ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "feedback" (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    "email" VARCHAR(256),
    "name" VARCHAR(256),
    "text" TEXT NOT NULL,
    "updated_at" TIMESTAMP NOT NULL,
    "created_at" TIMESTAMP NOT NULL  DEFAULT CURRENT_TIMESTAMP,
    "user_id" INT REFERENCES "user" ("id") ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "order" (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    "status" VARCHAR(23) NOT NULL  /* NEW: NEW\nAWAIT_PAYMENT: AWAIT_PAYMENT\nAWAIT_RESERVATION: AWAIT_RESERVATION\nRESERVATION_SUCCESS: RESERVATION_SUCCESS\nPAYMENT_SUCCESS: PAYMENT_SUCCESS\nWITHOUT_DOCS: WITHOUT_DOCS\nON_APPROVAL: ON_APPROVAL\nAPPROVAL_SUCCESS: APPROVAL_SUCCESS\nVERIFY_FAILED: VERIFY_FAILED\nAWAIT_CONFIRM_PAYMENT: AWAIT_CONFIRM_PAYMENT\nCONFIRM_PAYMENT_FAILED: CONFIRM_PAYMENT_FAILED\nBOOKED: BOOKED\nACTIVE: ACTIVE\nCOMPLETED: COMPLETED\nCANCELED: CANCELED\nREJECTED: REJECTED\nON_REINIT: ON_REINIT\nREINIT_FAILED: REINIT_FAILED\nPAYMENT_SESSION_EXPIRED: PAYMENT_SESSION_EXPIRED */,
    "amount" VARCHAR(40) NOT NULL,
    "currency" VARCHAR(3) NOT NULL  DEFAULT 'RUB' /* RUB: RUB\nUSD: USD */,
    "updated_at" TIMESTAMP NOT NULL,
    "created_at" TIMESTAMP NOT NULL  DEFAULT CURRENT_TIMESTAMP,
    "user_id" INT NOT NULL REFERENCES "user" ("id") ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aerich" (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    "version" VARCHAR(255) NOT NULL,
    "app" VARCHAR(100) NOT NULL,
    "content" JSON NOT NULL
);"""


async def downgrade(db: BaseDBAsyncClient) -> str:
    return """
        """
