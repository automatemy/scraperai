from tortoise import BaseDBAsyncClient


async def upgrade(db: BaseDBAsyncClient) -> str:
    return """
        CREATE TABLE IF NOT EXISTS "role" (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    "key" VARCHAR(256) NOT NULL,
    "name" VARCHAR(256) NOT NULL
);
CREATE TABLE IF NOT EXISTS "user" (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    "username" VARCHAR(50) NOT NULL UNIQUE,
    "password" VARCHAR(200) NOT NULL,
    "email" VARCHAR(255),
    "full_name" VARCHAR(255),
    "verification_code" VARCHAR(64),
    "balance" VARCHAR(40) NOT NULL  DEFAULT 0,
    "updated_at" TIMESTAMP NOT NULL,
    "created_at" TIMESTAMP NOT NULL  DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE IF NOT EXISTS "feedback" (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    "email" VARCHAR(256),
    "name" VARCHAR(256),
    "text" TEXT NOT NULL,
    "updated_at" TIMESTAMP NOT NULL,
    "created_at" TIMESTAMP NOT NULL  DEFAULT CURRENT_TIMESTAMP,
    "user_id" INT REFERENCES "user" ("id") ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "order" (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    "status" VARCHAR(21) NOT NULL  /* BLANK: BLANK\nNEW: NEW\nFORM_SHOWED: FORM_SHOWED\nAUTHORIZING: AUTHORIZING\nDS_CHECKING: 3DS_CHECKING\nDS_CHECKED: 3DS_CHECKED\nAUTHORIZED: AUTHORIZED\nCONFIRMING: CONFIRMING\nCONFIRMED: CONFIRMED\nREVERSING: REVERSING\nAWAIT_CONFIRM_PAYMENT: AWAIT_CONFIRM_PAYMENT\nPARTIAL_REVERSED: PARTIAL_REVERSED\nREVERSED: REVERSED\nREFUNDING: REFUNDING\nPARTIAL_REFUNDED: PARTIAL_REFUNDED\nREFUNDED: REFUNDED\n小ANCELED: 小ANCELED\nDEADLINE_EXPIRED: DEADLINE_EXPIRED\nREJECTED: REJECTED\nAUTH_FAIL: AUTH_FAIL */,
    "amount" VARCHAR(40) NOT NULL,
    "currency" VARCHAR(3) NOT NULL  DEFAULT 'RUB' /* RUB: RUB\nUSD: USD */,
    "multiplicator" REAL NOT NULL,
    "updated_at" TIMESTAMP NOT NULL,
    "created_at" TIMESTAMP NOT NULL  DEFAULT CURRENT_TIMESTAMP,
    "payment_provider" VARCHAR(7) NOT NULL  DEFAULT 'tinkoff' /* tinkoff: tinkoff */,
    "payment_id" VARCHAR(255),
    "payment_url" VARCHAR(255),
    "user_id" INT NOT NULL REFERENCES "user" ("id") ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "transaction" (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    "status" VARCHAR(9) NOT NULL  /* NEW: NEW\nRUNNING: RUNNING\nCONFIRMED: CONFIRMED\n小ANCELED: 小ANCELED */,
    "credits_amount" VARCHAR(40) NOT NULL,
    "updated_at" TIMESTAMP NOT NULL,
    "created_at" TIMESTAMP NOT NULL  DEFAULT CURRENT_TIMESTAMP,
    "user_id" INT NOT NULL REFERENCES "user" ("id") ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "scrapingtask" (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    "session_id" CHAR(36) NOT NULL,
    "status" VARCHAR(7) NOT NULL  /* RUNNING: RUNNING\nWAIT: WAIT */,
    "step" VARCHAR(9) NOT NULL  /* INIT: INIT\nDETECTION: DETECTION\nPAYMENT: PAYMENT\nSCRAPING: SCRAPING */,
    "taskiq_id" CHAR(36),
    "sources" JSON NOT NULL,
    "temp_results" JSON,
    "updated_at" TIMESTAMP NOT NULL,
    "created_at" TIMESTAMP NOT NULL  DEFAULT CURRENT_TIMESTAMP,
    "transaction_id" INT REFERENCES "transaction" ("id") ON DELETE CASCADE,
    "user_id" INT REFERENCES "user" ("id") ON DELETE CASCADE
);
CREATE INDEX IF NOT EXISTS "idx_scrapingtas_session_d8c104" ON "scrapingtask" ("session_id");
CREATE TABLE IF NOT EXISTS "aerich" (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    "version" VARCHAR(255) NOT NULL,
    "app" VARCHAR(100) NOT NULL,
    "content" JSON NOT NULL
);
CREATE TABLE IF NOT EXISTS "user_role" (
    "user_id" INT NOT NULL REFERENCES "user" ("id") ON DELETE CASCADE,
    "role_id" INT NOT NULL REFERENCES "role" ("id") ON DELETE CASCADE
);"""


async def downgrade(db: BaseDBAsyncClient) -> str:
    return """
        """
